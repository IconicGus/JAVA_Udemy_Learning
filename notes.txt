git reset - retira os comandos locais feitos na area de stage
git checkout - volta a alguma versão anterior (commit anterior)

public static int -> para criar funções que não retornam nulas
public static void -> para criar funções que retornam vazio


nomeVariavelComum
NomeClasse

POO

classes -> definição
objetos -> são instancias da classe
entidades
metodos -> funções
atributos -> variaveis

instanciação -> alocação dinâmica da memória


refazer modulo 70. exemplos

membro estatico -> funciona independentemente do objeto (não tem varias instancias)

public static final double variavel = alguma coisa -> representa uma variavel estatica

POO
Encapsulamento
Poliformismo
Herança

Construtor -> operação especial da classe, executada no momento de instanciação do objeto
Sobrecarga -> Recurso de uma classe de oferecer mais de uma operação com o mesmo nome
Encapsulamento -> Esconder detalhes de implementação de uam classe, expondo apenas operações seguras e que matenham o objeto em um estado consistente

MODIFICADORES DE ACESSO

- private
- nada
- protected
- public

Tipos Referencia -> calsses ( avariavel que representa a classe aponta para um endereço de memoria com todos os atributos dessa classe

Tipos Valor (tipos primitivos) -> eles guardam o valor e não um endereço de valores


Memoria tem a parte Stack e a parte Heap

Stack -> variaveis locais são desalocadas imediatamente assim que seu escopo local sai de execução
Heap -> objetos alocados dinamicamente, são desalocados pelo garbage collector quando não possuem mais referencia

boxing -> É o processo de conversão de um objeto tipo valor para um objeto tipo referência compatível
unboxing -> É o processo de conversão de um objeto tipo referência para um objeto tipo valor compatível

Wrapper classes
• São classes equivalentes aos tipos primitivos
• Boxing e unboxing é natural na linguagem
• Uso comum: campos de entidades em sistemas de informação (IMPORTANTE!)
• Pois tipos referência (classes) aceitam valor null e usufruem dos recursos OO

Listas
• Lista é uma estrutura de dados:
• Homogênea (dados do mesmo tipo)
• Ordenada (elementos acessados por meio de posições)
• Inicia vazia, e seus elementos são alocados sob demanda
• Cada elemento ocupa um "nó" (ou nodo) da lista
• Tipo (interface): List
• Classes que implementam: ArrayList, LinkedList, etc.

• Vantagens:
• Tamanho variável
• Facilidade para se realizar inserções e deleções

• Desvantagens:
• Acesso sequencial aos elementos *


Matrizes
• Em programação, "matriz" é o nome dado a arranjos bidimensionais
• Atenção: "vetor de vetores"
• Arranjo (array) é uma estrutura de dados:
• Homogênea (dados do mesmo tipo)
• Ordenada (elementos acessados por meio de posições)
• Alocada de uma vez só, em um bloco contíguo de memória

• Vantagens:
• Acesso imediato aos elementos pela sua posição

• Desvantagens:
• Tamanho fixo
• Dificuldade para se realizar inserções e deleções

Enumerações
• É um tipo especial que serve para especificar de forma literal um
conjunto de constantes relacionadas
• Palavra chave em Java: enum
• Vantagem: melhor semântica, código mais legível e auxiliado pelo
compilador


Categorias de classes
• Em um sistema orientado a objetos, de modo geral "tudo" é objeto.
• Por questões de design tais como organização, flexibilidade, reuso,
delegação, etc., há várias categorias de classes:
Controllers 
Entities
Services
Views
Repositories

Composição
• É um tipo de associação que permite que um objeto contenha outro
• Relação "tem-um" ou "tem-vários"
• Vantagens
• Organização: divisão de responsabilidades
• Coesão
• Flexibilidade
• Reuso

Herança
• É um tipo de associação que permite que uma classe herde todos dados e
comportamentos de outra
• Definições importantes
• Vantagens
• Reuso
• Polimorfismo
• Sintaxe
• class A extends B

• Relação "é-um"
• Generalização/especialização
• Superclasse (classe base) / subclasse (classe
derivada)
• Herança / extensão
• Herança é uma associação entre classes (e não
entre objetos)


Upcasting
• Casting da subclasse para superclasse
• Uso comum: polimorfismo
Downcasting
• Casting da superclasse para subclasse
• Palavra instanceof
• Uso comum: métodos que recebem parâmetros genéricos (ex: Equals)

